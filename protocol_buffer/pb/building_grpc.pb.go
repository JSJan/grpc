// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: building.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildingServiceClient is the client API for BuildingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildingServiceClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error)
	Location(ctx context.Context, opts ...grpc.CallOption) (BuildingService_LocationClient, error)
}

type buildingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildingServiceClient(cc grpc.ClientConnInterface) BuildingServiceClient {
	return &buildingServiceClient{cc}
}

func (c *buildingServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/building.BuildingService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingServiceClient) End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error) {
	out := new(EndResponse)
	err := c.cc.Invoke(ctx, "/building.BuildingService/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingServiceClient) Location(ctx context.Context, opts ...grpc.CallOption) (BuildingService_LocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &BuildingService_ServiceDesc.Streams[0], "/building.BuildingService/Location", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildingServiceLocationClient{stream}
	return x, nil
}

type BuildingService_LocationClient interface {
	Send(*LocationRequest) error
	CloseAndRecv() (*LocationResponse, error)
	grpc.ClientStream
}

type buildingServiceLocationClient struct {
	grpc.ClientStream
}

func (x *buildingServiceLocationClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildingServiceLocationClient) CloseAndRecv() (*LocationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildingServiceServer is the server API for BuildingService service.
// All implementations must embed UnimplementedBuildingServiceServer
// for forward compatibility
type BuildingServiceServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	End(context.Context, *EndRequest) (*EndResponse, error)
	Location(BuildingService_LocationServer) error
	mustEmbedUnimplementedBuildingServiceServer()
}

// UnimplementedBuildingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildingServiceServer struct {
}

func (UnimplementedBuildingServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedBuildingServiceServer) End(context.Context, *EndRequest) (*EndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedBuildingServiceServer) Location(BuildingService_LocationServer) error {
	return status.Errorf(codes.Unimplemented, "method Location not implemented")
}
func (UnimplementedBuildingServiceServer) mustEmbedUnimplementedBuildingServiceServer() {}

// UnsafeBuildingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildingServiceServer will
// result in compilation errors.
type UnsafeBuildingServiceServer interface {
	mustEmbedUnimplementedBuildingServiceServer()
}

func RegisterBuildingServiceServer(s grpc.ServiceRegistrar, srv BuildingServiceServer) {
	s.RegisterService(&BuildingService_ServiceDesc, srv)
}

func _BuildingService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/building.BuildingService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingService_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/building.BuildingService/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).End(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingService_Location_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildingServiceServer).Location(&buildingServiceLocationServer{stream})
}

type BuildingService_LocationServer interface {
	SendAndClose(*LocationResponse) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type buildingServiceLocationServer struct {
	grpc.ServerStream
}

func (x *buildingServiceLocationServer) SendAndClose(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildingServiceLocationServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildingService_ServiceDesc is the grpc.ServiceDesc for BuildingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "building.BuildingService",
	HandlerType: (*BuildingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _BuildingService_Start_Handler,
		},
		{
			MethodName: "End",
			Handler:    _BuildingService_End_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Location",
			Handler:       _BuildingService_Location_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "building.proto",
}
